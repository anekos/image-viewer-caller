#!/usr/bin/ruby
# vim: set fileencoding=utf-8 :

require 'pathname'
require 'shellwords'

module Viewer
  def self.has_command (command)
    system("which #{command.shellescape} > /dev/null 2>&1")
  end

  class ViewerBase
    attr_reader :prefixes

    def initialize (*paths)
      @paths = paths.map {|it| Pathname.new(it) }
      @prefixes = []
    end

    def directory
      @paths.first.dirname
    end

    def sorted_file_list
      if @paths.size == 1
        ls = directory.entries.map {|it| directory + it } .reject {|it| it.directory? && /\./ === it.extname } .sort
        i = ls.index(@paths.first)
        ls = ls.map {|it| it.to_s.shellescape }
        (ls[i .. -1] rescue []) + (ls[0 ... i] rescue [])
      else
        @paths
      end
    end

    def call
      system(prefix + command + ' ' + sorted_file_list.join(' '))
    end

    def prefix
      if @prefixes.empty?
        ''
      else
        @prefixes.join(' ') + ' '
      end
    end
  end

  class XViewerBase < ViewerBase
    def x?
      true
    end
  end

  class ConsoleViewerBase < ViewerBase
    def x?
      false
    end
  end

  class Fbv < ConsoleViewerBase
    def command
      'fbv -f'
    end
  end

  class Sxiv < XViewerBase
    def command
      'sxiv -b -s'
    end
  end

  def self.new (*paths)
    klass =
      case ENV['TERM']
      when 'linux'
        Fbv
      else
        Sxiv
      end
    instance = klass.new(*paths)
    if instance.x?
      %W[oa one].each do
        |cmd|
        instance.prefixes << cmd if has_command(cmd)
      end
    end
    instance
  end
end

Viewer.new(*ARGV).call
